import SwiftUI

// These color assets are now automatically generated by Xcode
// and can be accessed directly using Color.oceanBlue, Color.tealAccent, etc.
// This file now serves as documentation for our color scheme.

/*
 Color scheme documentation:
 
 oceanBlue: 
   Light: #3B8EA5
   Dark: #297A91
 
 oceanLightBlue:
   Light: #8ECAE6
   Dark: #75B8D5
 
 oceanDarkBlue:
   Light: #216583
   Dark: #195671
 
 oceanDeepBlue:
   Light: #023047
   Dark: #021D2E
 
 tealAccent:
   Light: #00B4D8
   Dark: #00A0C0
 
 coralAccent:
   Light: #FF7F50
   Dark: #EB6A3D
*/

// Utility extensions for color-related functionality can be added here
extension Color {
    // Example: A function to get a slightly lighter version of any color
    func lighter(by percentage: CGFloat = 0.2) -> Color {
        guard let uiColor = UIColor(self).lighter(by: percentage) else { return self }
        return Color(uiColor)
    }
    
    // Example: A function to get a slightly darker version of any color
    func darker(by percentage: CGFloat = 0.2) -> Color {
        guard let uiColor = UIColor(self).darker(by: percentage) else { return self }
        return Color(uiColor)
    }
}

// Helper extensions for UIColor
extension UIColor {
    func lighter(by percentage: CGFloat = 0.2) -> UIColor? {
        return self.adjust(by: abs(percentage))
    }
    
    func darker(by percentage: CGFloat = 0.2) -> UIColor? {
        return self.adjust(by: -abs(percentage))
    }
    
    func adjust(by percentage: CGFloat = 0.2) -> UIColor? {
        var red: CGFloat = 0, green: CGFloat = 0, blue: CGFloat = 0, alpha: CGFloat = 0
        if self.getRed(&red, green: &green, blue: &blue, alpha: &alpha) {
            return UIColor(red: min(red + percentage, 1.0),
                          green: min(green + percentage, 1.0),
                          blue: min(blue + percentage, 1.0),
                          alpha: alpha)
        } else {
            return nil
        }
    }
} 